import React, { useState, useEffect } from 'react';
import { Search, Check, X, Package, User, Clock, AlertTriangle, CheckCircle, LogOut, RefreshCw, Camera, Settings } from 'lucide-react';
import { orderManager, ORDER_STATUSES, STATUS_DESCRIPTIONS } from '../utils/orderManager';
import CashierLogin from './CashierLogin';
import AlternativeScanner from './AlternativeScanner';
import './CashierModule.css';

const CashierModule = () => {
  const [searchCode, setSearchCode] = useState('');
  const [validationResult, setValidationResult] = useState(null);
  const [isValidating, setIsValidating] = useState(false);
  const [loggedInCashier, setLoggedInCashier] = useState(null);
  const [lastSyncTime, setLastSyncTime] = useState(Date.now());
  const [orderHistory, setOrderHistory] = useState([]);
  const [showHistory, setShowHistory] = useState(false);
  const [showScanner, setShowScanner] = useState(false);

  // Cargar historial de √≥rdenes al iniciar
  useEffect(() => {
    loadOrderHistory();
  }, []);

  // Configurar sincronizaci√≥n autom√°tica
  useEffect(() => {
    // Listener para actualizaciones de √≥rdenes
    const handleOrdersUpdate = () => {
      console.log('üîÑ Actualizando cajero - nuevas √≥rdenes detectadas');
      setLastSyncTime(Date.now());
      loadOrderHistory(); // Recargar historial cuando hay cambios
    };

    window.addEventListener('ordersUpdated', handleOrdersUpdate);
    
    // Auto-refresh cada 5 segundos
    const interval = setInterval(() => {
      orderManager.getAllOrders(); // Esto fuerza la sincronizaci√≥n
      loadOrderHistory(); // Actualizar historial regularmente
    }, 5000);

    return () => {
      window.removeEventListener('ordersUpdated', handleOrdersUpdate);
      clearInterval(interval);
    };
  }, []);

  const loadOrderHistory = async () => {
    try {
      const allOrders = await orderManager.getAllOrders();
      const ordersArray = Object.values(allOrders)
        .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))
        .slice(0, 20); // √öltimas 20 √≥rdenes
      setOrderHistory(ordersArray);
    } catch (error) {
      console.error('Error cargando historial:', error);
    }
  };

  // Si no hay cajero logueado, mostrar pantalla de login
  if (!loggedInCashier) {
    return <CashierLogin onLogin={setLoggedInCashier} />;
  }

  const handleLogout = () => {
    setLoggedInCashier(null);
    setSearchCode('');
    setValidationResult(null);
    setIsValidating(false);
  };



  const formatPrice = (price) => {
    return new Intl.NumberFormat('es-PE', {
      style: 'currency',
      currency: 'PEN',
      minimumFractionDigits: 2
    }).format(price);
  };

  const formatDate = (date) => {
    return new Intl.DateTimeFormat('es-PE', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).format(new Date(date));
  };

  const handleSearch = () => {
    handleSearchWithCode(searchCode);
  };

  const handleMarkReady = async () => {
    try {
      if (validationResult && validationResult.success && validationResult.order) {
        const orderId = validationResult.order.id;
        await orderManager.updateOrderStatus(orderId, ORDER_STATUSES.READY, `Pedido listo para recoger - Preparado por ${loggedInCashier.name}`);
        
        // Actualizar el resultado local para reflejar el cambio
        const updatedOrder = await orderManager.getOrder(orderId);
        setValidationResult({
          ...validationResult,
          order: updatedOrder,
          message: `Orden actualizada - Estado: ${STATUS_DESCRIPTIONS[ORDER_STATUSES.READY] || 'Listo'}`
        });
        
        // Recargar historial
        loadOrderHistory();
      }
    } catch (error) {
      console.error('Error al marcar como listo:', error);
      alert('Error al actualizar el estado de la orden');
    }
  };

  const handleConfirmDelivery = async () => {
    try {
      if (validationResult && validationResult.success && validationResult.order) {
        const orderId = validationResult.order.id;
        
        // Actualizar estado a entregado
        await orderManager.updateOrderStatus(orderId, ORDER_STATUSES.DELIVERED, `Entregado por ${loggedInCashier.name || 'Cajero'}`);
        
        // Actualizar resultado local para mostrar confirmaci√≥n
        const updatedOrder = await orderManager.getOrder(orderId);
        setValidationResult({
          success: true,
          order: updatedOrder,
          message: 'Pedido entregado correctamente'
        });
        
        // Recargar historial
        loadOrderHistory();
        
        // Limpiar b√∫squeda despu√©s de un momento
        setTimeout(() => {
          setSearchCode('');
          setValidationResult(null);
        }, 3000);
      }
    } catch (error) {
      console.error('Error al confirmar entrega:', error);
      alert('Error al confirmar la entrega');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleScanSuccess = (scannedCode) => {
    console.log('üì± C√≥digo escaneado:', scannedCode);
    setSearchCode(scannedCode);
    setShowScanner(false);
    
    // Auto-buscar despu√©s de escanear
    setTimeout(() => {
      handleSearchWithCode(scannedCode);
    }, 500);
  };

  const handleSearchWithCode = async (code = searchCode) => {
    if (!code.trim()) {
      alert('Por favor ingresa un c√≥digo de orden');
      return;
    }

    setIsValidating(true);
    
    try {
      console.log('üîç Buscando orden en servidor:', code.toUpperCase());
      
      // Buscar la orden en el servidor
      const order = await orderManager.getOrder(code.toUpperCase());
      
      if (order) {
        console.log('‚úÖ Orden encontrada:', order);
        
        // Actualizar estado a preparando si a√∫n est√° confirmado
        if (order.status === ORDER_STATUSES.CONFIRMED) {
          await orderManager.updateOrderStatus(order.id, ORDER_STATUSES.PREPARING, `El cajero ${loggedInCashier.name} est√° preparando tu pedido`);
          // Obtener la orden actualizada
          const updatedOrder = await orderManager.getOrder(order.id);
          setValidationResult({
            success: true,
            order: updatedOrder,
            message: `‚úÖ Orden encontrada - Iniciando preparaci√≥n`
          });
        } else if (order.status === ORDER_STATUSES.PREPARING) {
          setValidationResult({
            success: true,
            order: order,
            message: `üîÑ Orden en preparaci√≥n - Marcar como listo cuando termine`
          });
        } else if (order.status === ORDER_STATUSES.READY) {
          setValidationResult({
            success: true,
            order: order,
            message: `üì¶ Orden lista - Entregar al cliente`
          });
        } else {
          setValidationResult({
            success: true,
            order: order,
            message: `Estado actual: ${STATUS_DESCRIPTIONS[order.status] || 'Desconocido'}`
          });
        }
        
        // Recargar historial despu√©s de cualquier cambio
        loadOrderHistory();
      } else {
        console.log('‚ùå Orden no encontrada');
        setValidationResult({
          success: false,
          message: 'C√≥digo de orden no encontrado o inv√°lido'
        });
      }
    } catch (error) {
      console.error('Error al buscar orden:', error);
      setValidationResult({
        success: false,
        message: 'Error al buscar la orden. Intenta nuevamente.'
      });
    } finally {
      setIsValidating(false);
    }
  };



  return (
    <div className="cashier-module">
      {/* Header */}
      <div className="cashier-header">
        <div className="store-info">
          <h1>OXXO - M√≥dulo Cajero</h1>
          <p>OXXO San Isidro Centro</p>
        </div>
        <div className="cashier-profile">
          <div className="sync-indicator">
            <RefreshCw size={16} className="sync-icon" />
            <span className="sync-text">Sincronizado: {new Date(lastSyncTime).toLocaleTimeString()}</span>
          </div>
          <div className="profile-info">
            <User size={24} />
            <div className="cashier-details">
              <span className="cashier-name">{loggedInCashier.name}</span>
              <span className="cashier-shift">Turno: {loggedInCashier.shift}</span>
            </div>
          </div>
          <button 
            className="history-btn" 
            onClick={() => loadOrderHistory()}
          >
            <Clock size={18} />
            Actualizar Historial
          </button>
          <button className="logout-btn" onClick={handleLogout}>
            <LogOut size={18} />
            Cerrar Sesi√≥n
          </button>
        </div>
      </div>

      {/* Main Content Layout */}
      <div className="cashier-content">
        {/* Main Section - 75% */}
        <div className="main-section">
          {/* Search Section */}
          <div className="search-section">
        <div className="max-w-2xl mx-auto text-center mb-6">
          <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">
            Validar Pago de Cliente
          </h2>
          <p className="text-gray-600">Escanea o ingresa el c√≥digo de orden del cliente</p>
        </div>
        
        {/* Input Container - Mobile First */}
        <div className="max-w-2xl mx-auto space-y-4">
          {/* Fila de Input y Scanner */}
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex-1 relative">
              <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="C√≥digo de orden (ej: OXXO12345678)"
                value={searchCode}
                onChange={(e) => setSearchCode(e.target.value)}
                onKeyPress={handleKeyPress}
                disabled={isValidating}
                className="w-full pl-10 pr-4 py-4 text-lg font-mono border-2 border-gray-300 rounded-xl focus:border-oxxo-red focus:ring-4 focus:ring-red-100 transition-all duration-200 bg-white disabled:bg-gray-100 disabled:cursor-not-allowed"
              />
            </div>
            
            {/* Bot√≥n Scanner - Grande en m√≥vil */}
            <button 
              onClick={() => setShowScanner(true)}
              disabled={isValidating}
              className="h-16 w-full sm:w-16 bg-oxxo-red hover:bg-oxxo-dark-red text-white rounded-xl transition-all duration-200 flex items-center justify-center gap-2 sm:gap-0 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg active:scale-95"
            >
              <Camera size={24} />
              <span className="sm:hidden font-semibold">Escanear QR</span>
            </button>
          </div>
          
          {/* Bot√≥n Buscar - Ancho completo en m√≥vil */}
          <button 
            onClick={handleSearch}
            disabled={isValidating}
            className="w-full py-4 bg-oxxo-dark-blue hover:bg-blue-900 text-white rounded-xl font-semibold text-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg active:scale-95"
          >
            {isValidating ? (
              <>
                <RefreshCw className="animate-spin" size={20} />
                <span>Buscando...</span>
              </>
            ) : (
              <>
                <Search size={20} />
                <span>Buscar Orden</span>
              </>
            )}
          </button>
        </div>
          </div>

          <div className="search-methods">
            <p className="search-hint">
              <Camera size={16} />
              Escanea con <strong>bot√≥n amarillo</strong> (principal) o <strong>azul</strong> (alternativo), o ingresa manualmente
            </p>
          </div>
        </div>
      </div>

      {/* Validation Result */}
      {validationResult && (
        <div className={`validation-result ${validationResult.success ? 'success' : 'error'}`}>
          <div className="result-header">
            <div className="result-icon">
              {validationResult.success ? <CheckCircle size={48} /> : <X size={48} />}
            </div>
            <div className="result-message">
              <h3>
                {validationResult.success 
                  ? (validationResult.order?.status === ORDER_STATUSES.CONFIRMED 
                      ? '‚úÖ Orden Encontrada - Iniciar Preparaci√≥n' 
                      : validationResult.order?.status === ORDER_STATUSES.PREPARING
                      ? 'üîÑ En Preparaci√≥n - Marcar como Listo'
                      : validationResult.order?.status === ORDER_STATUSES.READY
                      ? 'üì¶ Listo para Entregar'
                      : '‚úÖ Orden V√°lida')
                  : '‚ùå Orden No Encontrada'
                }
              </h3>
              <p>{validationResult.message || 'Procesando validaci√≥n...'}</p>
            </div>
          </div>

          {validationResult.success && validationResult.order && (
            <div className="order-details">
              {/* Customer Info */}
              <div className="customer-section">
                <h4>Informaci√≥n del Cliente</h4>
                <div className="customer-info">
                  <p><strong>Cliente:</strong> {validationResult.order.customerName || 'No disponible'}</p>
                  <p><strong>Orden:</strong> {validationResult.order.id || 'No disponible'}</p>
                  <p><strong>Total:</strong> {validationResult.order.total ? formatPrice(validationResult.order.total) : 'No disponible'}</p>
                  <p><strong>Estado:</strong> {validationResult.order.status ? STATUS_DESCRIPTIONS[validationResult.order.status] : 'No disponible'}</p>
                </div>
              </div>

              {/* Products */}
              {validationResult.order.items && validationResult.order.items.length > 0 && (
                <div className="products-section">
                  <h4>Productos a Entregar</h4>
                  <div className="products-list">
                    {validationResult.order.items.map((item, index) => (
                      <div key={index} className="product-row">
                        <Package size={20} />
                        <span className="product-name">{item.name || 'Producto sin nombre'}</span>
                        <span className="product-qty">x{item.quantity || 1}</span>
                        <span className="product-price">{formatPrice((item.price || 0) * (item.quantity || 1))}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="cashier-actions">
                {validationResult.order.status === ORDER_STATUSES.PREPARING && (
                  <button className="mark-ready-btn" onClick={handleMarkReady}>
                    <Package size={20} />
                    Marcar como Listo para Recoger
                  </button>
                )}
                
                {validationResult.order.status === ORDER_STATUSES.READY && (
                  <button className="confirm-delivery-btn" onClick={handleConfirmDelivery}>
                    <CheckCircle size={20} />
                    Confirmar Entrega y Generar Boleta
                  </button>
                )}
                
                {validationResult.order.status === ORDER_STATUSES.DELIVERED && (
                  <div className="delivered-message">
                    <CheckCircle size={20} color="#28a745" />
                    <span>‚úÖ Pedido ya fue entregado</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Instructions */}
      <div className="instructions-panel">
        <h3>Instrucciones de Uso</h3>
        <div className="instructions-grid">
          <div className="instruction-card">
            <div className="step-number">1</div>
            <div className="step-content">
              <h4>Cliente llega con c√≥digo</h4>
              <p>El cliente presenta el c√≥digo QR o menciona su c√≥digo de orden</p>
            </div>
          </div>
          
          <div className="instruction-card">
            <div className="step-number">2</div>
            <div className="step-content">
              <h4>Validar pago</h4>
              <p>Escanea o ingresa el c√≥digo en el sistema para verificar el pago</p>
            </div>
          </div>
          
          <div className="instruction-card">
            <div className="step-number">3</div>
            <div className="step-content">
              <h4>Entregar productos</h4>
              <p>Verifica los productos contra la lista y entr√©galos al cliente</p>
            </div>
          </div>
          
          <div className="instruction-card">
            <div className="step-number">4</div>
            <div className="step-content">
              <h4>Confirmar entrega</h4>
              <p>Haz clic en "Confirmar Entrega" para generar la boleta</p>
            </div>
          </div>
        </div>
      </div>
        </div>
        
        {/* Sidebar Section - 25% */}
        <div className="sidebar-section">
          {/* Historial de √ìrdenes */}
          <div className="order-history">
            <div className="history-header">
              <h3>Historial de √ìrdenes</h3>
              <span className="history-count">{orderHistory.length}</span>
            </div>
            
            {orderHistory.length === 0 ? (
              <div className="no-history">
                <Clock size={32} color="#ccc" />
                <p>Sin √≥rdenes procesadas</p>
              </div>
            ) : (
              <div className="history-list">
                {orderHistory.map((order) => (
                  <div key={order.id} className="history-item">
                    <div className="history-main">
                      <div className="order-code">
                        <code>{order.id.slice(-6)}</code>
                      </div>
                      <div className="order-info">
                        <div className="customer-row">
                          <h6>{order.customerName?.split(' ')[0] || 'Cliente'}</h6>
                          <p className="order-price">{formatPrice(order.total)}</p>
                        </div>
                        <div className="order-details">
                          <span className="order-items-count">
                            {order.items?.length || 0} producto{(order.items?.length || 0) !== 1 ? 's' : ''}
                          </span>
                          <span className="order-method">
                            {order.paymentMethod === 'card' && 'üí≥ Tarjeta'}
                            {order.paymentMethod === 'cash' && 'üíµ Efectivo'}
                            {order.paymentMethod === 'digital' && 'üì± Digital'}
                            {!order.paymentMethod && 'üí∞ Pago'}
                          </span>
                        </div>
                      </div>
                      <div className="order-status">
                        <span className={`status-badge-mini ${order.status}`}>
                          {order.status === 'confirmed' && '‚è≥'}
                          {order.status === 'preparing' && 'üîÑ'}
                          {order.status === 'ready' && '‚úÖ'}
                          {order.status === 'delivered' && 'üéâ'}
                        </span>
                        <div className="order-timing">
                          <span className="order-time-mini">
                            {new Date(order.updatedAt).toLocaleTimeString('es-PE', {hour: '2-digit', minute: '2-digit'})}
                          </span>
                          <span className="order-date-mini">
                            {new Date(order.createdAt).toLocaleDateString('es-PE', {day: '2-digit', month: '2-digit'})}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="history-details">
                      <div className="status-timeline">
                        {order.statusHistory?.slice(-2).map((status, idx) => (
                          <div key={idx} className="timeline-item">
                            <span className="timeline-time">
                              {new Date(status.timestamp).toLocaleTimeString('es-PE', {hour: '2-digit', minute: '2-digit'})}
                            </span>
                            <span className="timeline-desc">{status.description}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* QR Scanner Modal */}
      <AlternativeScanner 
        isVisible={showScanner}
        onScanSuccess={handleScanSuccess}
        onClose={() => setShowScanner(false)}
      />

    </div>
  );
};

export default CashierModule;